/*
 *  This file is part of AndroidIDE.
 *
 *  AndroidIDE is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  AndroidIDE is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *   along with AndroidIDE.  If not, see <https://www.gnu.org/licenses/>.
 */

package com.itsaky.androidide.uidesigner

import android.os.Bundle
import android.view.View
import android.view.ViewGroup
import android.view.ViewGroup.LayoutParams.MATCH_PARENT
import com.blankj.utilcode.util.ReflectUtils
import com.itsaky.androidide.app.BaseIDEActivity
import com.itsaky.androidide.editor.IEditorProvider
import com.itsaky.androidide.lookup.Lookup
import com.itsaky.androidide.preferences.internal.fontSize
import com.itsaky.androidide.syntax.colorschemes.SchemeAndroidIDE
import com.itsaky.androidide.uidesigner.databinding.ActivityShowXmlBinding
import com.itsaky.androidide.utils.jetbrainsMono
import io.github.rosemoe.sora.event.ScrollEvent
import io.github.rosemoe.sora.event.Unsubscribe
import io.github.rosemoe.sora.widget.CodeEditor

/**
 * An activity to show the XML code generated by UI Designer.
 *
 * @author Akash Yadav
 */
class ShowXmlActivity : BaseIDEActivity() {

  private var editor: CodeEditor? = null
  private var unsubscribe: Unsubscribe? = null
  private var binding: ActivityShowXmlBinding? = null

  companion object {
    const val KEY_XML = "ide.uidesigner.viewXml.Xml"
  }

  override fun bindLayout(): View {
    this.binding = ActivityShowXmlBinding.inflate(layoutInflater)
    this.editor =
      Lookup.DEFAULT.lookup(IEditorProvider::class.java)!!.createEditor(this) as CodeEditor

    setSupportActionBar(this.binding!!.toolbar)
    supportActionBar?.setDisplayHomeAsUpEnabled(true)

    this.binding!!.toolbar.setNavigationOnClickListener { finish() }

    this.editor?.let { editor ->
      editor.colorScheme = SchemeAndroidIDE.newInstance(this@ShowXmlActivity)
      editor.editable = false
      editor.typefaceText = jetbrainsMono()
      editor.typefaceLineNumber = jetbrainsMono()

      // TODO(itsaky): Move language implementations to separate module
      editor.setEditorLanguage(
        ReflectUtils.reflect("com.itsaky.androidide.language.xml.XMLLanguage").newInstance().get()
      )

      editor.setText(intent?.getStringExtra(KEY_XML) ?: "")
      editor.setTextSize(fontSize)
      editor.subscribeEvent(ScrollEvent::class.java) { event, unsubscribe ->
        this.unsubscribe = unsubscribe
        val fab = this.binding?.copy ?: return@subscribeEvent
        event.apply {
          if (startY > endY && fab.isExtended) {
            fab.shrink()
          }
          if (endY == 0 || startY < endY && !fab.isExtended) {
            fab.extend()
          }
        }
      }

      binding!!.editorContainer.let { container ->
        container.removeAllViews()
        container.addView(editor, ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT))
      }
    }

    return this.binding!!.root
  }

  override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
  }

  override fun onDestroy() {
    super.onDestroy()
    this.binding = null
    this.unsubscribe?.unsubscribe()
    this.editor?.release()
    this.editor = null
  }
}
